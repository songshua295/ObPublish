{"/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E9%83%A8%E7%BD%B2Obsidian%E9%9D%99%E6%80%81%E7%9F%A5%E8%AF%86%E5%BA%93%E7%BD%91%E7%AB%99":{"title":"部署Obsidian静态知识库网站","content":"# 部署\n\n## 基本结构\n\n```mermaid\ngraph BT\n\tzck(子模块_笔记仓库)\n\tfckhugo(父仓库hugo分支)\n\tfckmaster(父仓库master分支)--\u003ewz(你vercel部署的网站)\n\tzck.-通过推送workflows+TOKEN推送到.-\u003efckhugo\n\tfckhugo.-通过转换为gitpage的workflows+TOKEN转换到 .-\u003efckmaster\n\t\n\t\n\t\n```\n\n\n\n## 仓库设置以及部署\n\n### 父仓库（用于发布仓库：fork）\n\n1. fork我的的ObPublish仓库，然后使用git工具克隆`clone`到本地。\n\n   ```\n   git clone 你的仓库链接\n   ```\n\n   ![image-20220915232031007](../asset/image-20220915232031007.png)\n\n2. 使用`vscode`打开这个仓库，然后在 `设置`--\u003e`查看`--\u003e`终端` 打开终端，可以在此处进行git的基本操作\n\n   1. ![image-20220915230907147](../asset/image-20220915230907147.png)\n   2. 选择bash终端，这个是专门用来执行git命令的，当然，你也可以用除了shell之外的其他终端![image-20220915231014606](../asset/image-20220915231014606.png)\n\n3. 查看基本的情况\n\n   ```bash\n   $ git remote -v #查看当前连接的远程仓库\n   origin  https://github.com/tianzhongs/ObPublish.git (fetch)\n   origin  https://github.com/tianzhongs/ObPublish.git (push)\n   \n   22305@□□Ӵ□□ȥ MINGW64 ~/Desktop/ObPublish (hugo)\n   $ git submodule status #查看子模块状态，我的因为已经删除了所有的子模块文件，不会显示\n   \n   ```\n\n   \n\n4. 如果你有子模块仓库（仓库上的content上有@地址，就说明有子模块仓库），你需要采用一下命令对子模块进行删除，删除之后才能连接上你自己的(以下命令需要在bash下使用)\n\n   ```bash\n   rm -rf content     #删除子模块目录及源码 bash下使用\n   vi .gitmodules       #删除项目目录下.gitmodules文件中子模块相关条目 bash下使用\n   vi .git/config       #删除配置项中子模块相关条目 bash下使用\n   rm .git/module/*     #删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可 \n   ```\n\n### 子仓库设置\n\n1. github上新建一个远程仓库，建议勾选 `私有`，添加一个readme文件（可以初始化仓库，减少麻烦）。**此仓库保存你obsidian知识库中的文件，并通过之后设置的工作流推送到父仓库（发布仓库）**![image-20220915232548960](../asset/image-20220915232548960.png)\n\n2. 将此仓库克隆到本地\n\n   ```bash\n   git clone 你的仓库链接\n   ```\n\n3. 将此知识库必备文件包**解压后**放到你克隆的仓库中\n\n   [文件包点击可达下载地址](https://www.notion.so/tianzhongs/obsidian-de6a07362b774712b51ec44e12cd344d#166e6c51325148a28330dc8be53b2996)\n\n   所勾选的三个文件或文件夹是必须的目录结构，其中的部分文档和模板可以删除![image-20220915234134787](../asset/image-20220915234134787.png)\n\n4. 用vscode打开此知识库仓库，通过vscode或git命令进行提交，git命令采用以下进行\n\n   ```bash\n   git add . #添加所有文件到暂存区\n   git commit -m \"提交必备文件\" #提交信息\n   git push #提交到远程仓库\n   ```\n\n### 子模块仓库配置\n\n\u003e 因为笔记仓库和发布仓库是分离的，所以需要将子仓库与父仓库进行关联。将子仓库作为子模块放到父仓库中，作为父仓库的content文件夹\n\n1. 打开父仓库（发布仓库Obpublish），使用git命令\n\n   ```bash\n   git submodule add https://github.com/tianzhongs/ObZhishiku.git content #将仓库作为模块放到父仓库的content文件夹中\n   git submodule update --init #初始化子模块\n   git submodule update --remote #子模块最新的内容版本同步到父仓库\n   ```\n\n   ![image-20220916002216473](../asset/image-20220916002216473.png)\n\n   可以在本地父仓库（发布仓库）中看到多了一个content文件夹，其中包含的就是笔记仓库的内容\n\n2. 将本地的操作同步到github上(**提交三部曲**)\n\n   ```bash\n   git add .\n   git commit -m \"添加子模块\"\n   git push #提交到远程仓库\n   ```\n\n   ![image-20220916002603531](../asset/image-20220916002603531.png)\n\n此时，就可以在github父仓库中看到子模块的状态，有个`@`符号，所@的就是子模块的版本号，点击可以进入到对应的子仓库版本号 的内容\n\n## 配置转换工作流文件\n\n在父仓库中，有一个`workflows`文件夹中有一个`deploy.yaml`文件，是github的专属工作流文件，可以在其中部署自己的脚本等等达到自动化。\n\n### 添加TOKEN\n\n1. 打开github，点击头像，在弹出的选项中选择 `settings` ，往下翻，找到`Developer settings`（开发者设置）中，添加一个TOKEN，全部权限都勾选，期限设置永久\n   1. ![image-20220916003405259](../asset/image-20220916003405259.png)\n   2. ![image-20220916003652746](../asset/image-20220916003652746.png)\n\n2. 复制你的TOKEN，在桌面新建一个txt保存起来，因为之后也需要用到\n\n3. 在github上打开父仓库，点击**仓库的settings**,在下面可以找到添加，将刚才复制的TOKEN添加进去作为一个环境变量，需要注意：名字必须是全大写的`TOKEN`![image-20220916004320660](../asset/image-20220916004320660.png)\n\n4. 返回到本地父仓库（发布仓库）的`.github\\workflows\\deploy.yaml`，对工作流进行基本的设置。设置之后，git推送三部曲（add，commit，push到远程仓库）\n\n   ```yaml\n   name: Deploy to GitHub Pages\n   \n   on:\n     push:\n       branches:\n         - hugo\n   \n     workflow_dispatch:\n   \n   jobs:\n     deploy:\n       runs-on: ubuntu-22.04\n       steps:\n         - uses: actions/checkout@v2\n           with: \n             token: ${{ secrets.TOKEN }}  #这里是添加的token，不用设置，需要在仓库中添加TOKEN，$代表的是调用刚才添加的环境变量，所以不需要设置\n             submodules: 'true'\n         - name: Checkout submodules\n           run: git submodule update --init --recursive\n   \n         - name: config1 \n           run: rm -rf content/.obsidian content/cedict_ts.u8 content/Extras/Templates  \u0026\u0026 mv content/*.md content/Atlas \u0026\u0026 find content/ -name \"*.md\" | xargs -I file  mv -f file content \u0026\u0026  mv content/AboutTheGarden.md content/_index.md \n         \n         - name: config2\n           run: \"ls content/ \u0026\u0026 grep -lr --null 'title' content/* | xargs -0 sed -i -E -r 's/title: \"(.*)/title: \\\"\\\\1\\\"/g'\"\"\n         \n         - name: config3 \n           run: rm -rf content/*.md-E\n   \n         \n         - name: Build Link Index\n           uses: jackyzha0/hugo-obsidian@v2.18\n           with:\n             index: true\n             input: content\n             output: assets/indices\n             root: .\n   \n   \n         - name: Setup Hugo\n           uses: peaceiris/actions-hugo@v2\n           with:\n             hugo-version: '0.96.0'\n             extended: true\n   \n         - name: Build\n           run: hugo --minify --debug\n   \n         - name: Deploy\n           uses: peaceiris/actions-gh-pages@v3\n           with:\n             github_token: ${{ secrets.GITHUB_TOKEN }}\n             publish_dir: ./public\n             publish_branch: master  # deploying branch\n             cname: www.baidu.com   #修改成你的域名\n   ```\n\n   \n\n5. 将子模块的再次同步到父仓库一下，在本地父仓库（发布仓库）中执行以下命令（如果没有推送的东西，就打开readme文件，随便加个空格就有改动，可以推送了）\n\n   ```bash\n   git submodule update --init #初始化子模块\n   git submodule update --remote #子模块最新的内容版本同步到父仓库\n   git add .\n   git commit -m \"最新的\"\n   git psuh\n   ```\n\n6. 推送之后，打开github发布的远程仓库ObPublish中的`action`，这里是查看工作流的地方，查看刚才推送的能否成功转换，之前错误的工作流不用管![image-20220916005313382](../asset/image-20220916005313382.png)\n7. 你可以点击github中的code面板，可以选择分支，你会发现多了一个`master`分支，那个就是通过我们的工作流将hugo分支中子模块-我们的笔记content中的内容转换成了html文件放到了master分支中\n\n## Vercel基本部署\n\n1. 打开 [verel](https://vercel.com/)次用github登录之后，选择新建Project（项目），选择import你的发布仓库obPublish\n2. 选择环境是other，即默认没有环境，因为部署的是master分支，里面全是html文件，浏览器能够执行，不需要环境![image-20220916005911016](../asset/image-20220916005911016.png)开始部署\n3. 然后成功之后，你会发现主界面是错误，原因是因为vercel默认部署你github仓库中的默认分支，所以需要 **调整部署分支，为master**：在你部署的这个项目中点击settings，选择git，然后设置分支，保存。\n4. ![image-20220916010146988](../asset/image-20220916010146988.png)\n5. 你还需要在本地仓库中修改一下父仓库的readme文件，随便加个空格就行。这样做的原因是：vercel每次进行部署，都建立在你的仓库有改动的情况下，因为没有改动，他就不会部署你的master分支，所以**你在本地父仓库中修改内容，push推送（git推送三部曲）到远程仓库就好**（推送之后你依旧可以到github远程父仓库中的`action`查看工作流的情况，工作流成功之后，verel才会开始拉取github中的master分支，开始部署网站。）![image-20220916010603652](../asset/image-20220916010603652.png)\n6. 可以看到已经部署成功，在vercel也成功的部署了master分支![image-20220916010653216](../asset/image-20220916010653216.png)\n7. 点击overview面板中的visit进行访问，可以看到部署成功的界面了（搜索功能不能使用，因为父仓库中的`config.toml`文件中没有配置成你的域名，你也可以配置成vercel的项目域名Domains）。![image-20220916010751475](../asset/image-20220916010751475.png)\n\n## 配置文件部分\n\n### 域名\n\n1. 打开vercel的`settings`面板，在选择`Domain`，添加你的域名（域名解析方面不赘述），添加之后如图，当然你也可以用vercel自带的项目域名![image-20220916105704328](../asset/image-20220916105704328.png)\n\n\n\n### 父仓库中的文件配置\n\n`config.toml`：配置baseURl，配置成你的域名，刚才在vercel中设置的或者vercel项目自带生成的（此处域名不改成自己的，无法使用搜索功能）\n\n`data\\config.yaml`：配置一些基本信息\n\n### 设置子模块工作流(用于推送到父模块的hugo分支)\n\n1. 添加TOKEN到action\t\n\n   和之前的步骤一样，在github子模块笔记仓库中的settings中添加刚才的TOKEN进去，名字必须是全部大写\n\n2. 点击仓库才action，在这里可以添加工作流，如果你，如果仓库中有工作流文件，你可以对其进行修改，工作流在.github/workflows文件夹下\n\n3. 开始新建工作流![image-20220916160314431](../asset/image-20220916160314431.png)\n\n4. 全部删除，将以下内容复制粘贴进去，然后进行修改配置\n\n   ```yaml\n   name: Send submodule updates to parent repo\n   \n   on:\n     push:\n       branches:\n         - main\n   \n   jobs:\n     update:\n       runs-on: ubuntu-latest\n   \n       steps:\n         - uses: actions/checkout@v2\n           with:\n             repository: zhangsan/dg3 # 设置你用户名/发布仓库的仓库名,作用是将子模块更新到父仓库dg3\n             token: ${{ secrets.TOKEN }}\n             # 把子模块打开\n             submodules: 'true'\n   \n         - name: Pull \u0026 update submodules recursively\n           run: |\n             git submodule update --init --recursive\n             git submodule update --recursive --remote\n         - name: Commit\n           run: |\n             git config user.email \"提交的邮箱，一般是你github的邮箱\" #修改\n             git config user.name \"你的名称\" #修改\n             git add --all\n             git commit -m \"Update submodules\" || echo \"No changes to commit\"\n             git push\n   ```\n\n   5. 提交之后，点击action进行查看![image-20220916161016944](../asset/image-20220916161016944.png)\n   6. 到这里，在本地笔记仓库中做了修改，就可以直接推送，就不需要到父仓库中进行子模块同步了，工作流会自动在云端同步。\n\n\n\n## 额外评论区设置\n\n预览图\n\n![image-20220916163756206](../asset/image-20220916163756206.png)\n\n\u003e 为了方便配置，我选择的是gitTalk的方式，开始我使用了`waline`的方式去配置，虽然能够评论，但是不清楚为什么一直加载评论区，所以我就弃用了，waline的界面配置性更高，同时可以无需登录评论。\n\n### gitTalk评论区进行配置\n\n\u003e 因为评论区是和仓库的issue相互连接的，评论区中的内容都会转到仓库issue中，因为笔记仓库私有化，所以相对于评论的可见性，我建议可以自己进行选择。比如我希望别人也能够看见评论，在父仓库发布仓库中进行以下步骤。\n\n注意：**仓库的issue必须打开**，默认是打开的\n\n1. 点击`头像`--\u003e`setting`--\u003e`开发者设置`--\u003e`OAuth Apps`，或者直接点击这个连接进入(开发者设置)[https://github.com/settings/developers]，添加一个应用\n\n2. 设置好你的域名，别的随便设置![image-20220916162639143](../asset/image-20220916162639143.png)\n\n3. 复制id和密码，![image-20220916162812917](../asset/image-20220916162812917.png)\n\n4. 打开本地仓库父仓库的`layouts\\partials\\contact.html`文件，末尾添加以下代码，然后配置id和密码\n\n   ```html\n   \n   \u003c!-- 以下为你需要配置的评论区，以下部分可以删除 --\u003e\n   \u003c!-- 引入 --\u003e\n   \u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\"\u003e\n   \u003cscript src=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"\u003e\n       \u003c/script\u003e\n   \n       \u003c!-- 添加一个容器--\u003e\n       \u003cdiv id=\"gitalk-container\"\u003e\u003c/div\u003e\n   \n       \u003c!-- 生成 gitalk 插件--\u003e\n       \u003cscript\u003e\n           var gitalk = new Gitalk({\n               clientID: 'b3de82d3148c36a4a587', //Client ID 自己配置\n   \n               clientSecret: '973b351e5a54ff9ea6d93e7db3f431beef48dc2d', //Client Secret 自己配置\n   \n               repo: 'blogtalk',//保存评论的仓库仓库名称  自己配置\n               owner: 'tianzhongs',//仓库拥有者  自己配置\n               admin: ['Tianzhongs'], //仓库管理员\n               id: location.href,      // Ensure uniqueness and length less than 50\n               distractionFreeMode: false  // Facebook-like distraction free mode\n           })\n   \n           gitalk.render('gitalk-container')\n       \u003c/script\u003e\n   ```\n\n   \n\n5. 等vercel拉取部署成功之后\n\n#### gittalk评论Lable问题\n\n\u003e 在我后来使用的过程中，点击除了主页笔记之外的页面，会出现评论区验证错误（Error: Validation Failed.）\n\n在此致谢：[我是东山啊](https://blog.misec.top/archives/2018810gitalk-error#:~:text=Error%3A%20Validation%20Failed%20%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E5%B0%B1%E6%AF%94%E8%BE%83%E5%A4%8D%E6%9D%82%E4%BA%86%EF%BC%8C%E9%83%A8%E5%88%86%E6%96%87%E7%AB%A0%E7%9A%84%E8%AF%84%E8%AE%BA%E5%8C%BA%E4%BC%9A%E6%8A%A5Error%3A%20Validation%20Failed%2C%E5%85%B7%E4%BD%93%E5%8E%9F%E5%9B%A0%E6%98%AF%E7%94%B1%E4%BA%8E,Github%20%E9%99%90%E5%88%B6%20labal%20%E9%95%BF%E5%BA%A6%E4%B8%8D%E8%83%BD%E8%B6%85%E8%BF%87%2050%E5%BC%95%E8%B5%B7%E7%9A%84%EF%BC%8C%E8%AF%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%9D%A5%E8%87%AAGitalk%E9%A1%B9%E7%9B%AE%E4%BB%93%20Issues115%EF%BC%8C%E9%80%9A%E8%BF%87MD5%E5%8A%A0%E5%AF%86ID%E6%9D%A5%E7%BC%A9%E7%9F%ADlabal%E9%95%BF%E5%BA%A6%E3%80%82)的博客，已经将修改后的内容放置到了项目之中，可以直接fork进行使用\n\n# 注意事项\n\n1. 笔记仓库中的笔记都有`title`的yaml头，网站部署后的文章标题就是yaml中的title字段，所以title字段是笔记的必须\n2. 如果你已经部署好了相关的文档，那么就可以看一下这篇文章，其中包含了关于这个知识库在Obsidian中的一些格式问题，**尤其需要注意**，点击我[[Obsidian知识库笔记相关]]","lastmodified":"2022-09-17T14:33:20.671105631Z","tags":null},"/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/Obsidian%E7%9F%A5%E8%AF%86%E5%BA%93%E7%AC%94%E8%AE%B0%E7%9B%B8%E5%85%B3":{"title":"Obsidian知识库笔记相关注意事项","content":"## 关于内容\n1. 尤其需要注意的是，在每片文章中书写一个yaml头，其中yaml头包括了`title`字段，用来标识这篇文章的标题，当然，如果没有也没有太大的问题，只是不能显示这个标题，但一般还是建议有一个\n2. 如果每次添加比较麻烦，你可以配合Obsidan中的`Templater`插件进行生成，当然，你还可以为其设置一个专属的快捷键，那会让你更“快”的。（下面放置了一个基本的Templater模板，yaml字段采用`#`号注释）\n所有字段都可以不用，但是建议保留title字段，字段名和字段值中间采用`:`隔开，**分号后面有一个空格，需要注意**\n```\n---\ncomments: false   #该字段可以不要，因为采用了gittalk的评论区，貌似已经不起作用了\ndate created: \u003c% tp.date.now() %\u003e  #采用Templater生成的文档创建时间\ndate modified: 2022-08-20          #此处我没有找到自动化的东西，是因为我觉得自动化的不如我自己手动修改\nid:                                #开源者继承下来的字段，我不知道啥作用\nlayout: page                    #布局格式，与网站的搜索方式有关\ntags: \u003c% tp.file.folder() %\u003e    #tag标签，我采用的是用父文件夹名，因为我一般都用文件夹进行归类\ntitle: \"\u003c% tp.file.title %\u003e    #文件名\"\n---\n```\n##","lastmodified":"2022-09-17T14:33:20.671105631Z","tags":null},"/AboutTheGarden":{"title":"知识Cool😊","content":"\n这里是我的知识库。😊😊\n\n项目项目地址：[ObPublish](https://github.com/tianzhongs/ObPublish.git)\n\n此项目是由oldwinter的项目[dg3](https://github.com/oldwinter/dg3)修改得来。从其中删除了一些不必要的文件，并修改了一些奇怪的配置，算是轻量化了一下。\n\n如果你也需要创建一个这样的云知识库，可以参考以下地址中的教程或者原作者的文档。\n\n致谢：\n    1. @oldwinter的原开源代码\n    2. @行者无疆的细致解答","lastmodified":"2022-09-17T14:33:20.671105631Z","tags":null},"/README":{"title":"","content":"# Obzhishiku\n我的Obsiidan知识库","lastmodified":"2022-09-17T14:33:20.427100644Z","tags":null}}