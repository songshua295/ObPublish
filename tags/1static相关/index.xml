<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>1static相关 on</title><link>https://ob.doingnothing.ml/tags/1static%E7%9B%B8%E5%85%B3/</link><description>Recent content in 1static相关 on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://ob.doingnothing.ml/tags/1static%E7%9B%B8%E5%85%B3/index.xml" rel="self" type="application/rss+xml"/><item><title>0512_static变量</title><link>https://ob.doingnothing.ml/0512_static%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/0512_static%E5%8F%98%E9%87%8F/</guid><description>0512_static变量 不声明static时 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public class a02Chinese { public static void main(String[] args) { Chinese c1=new Chinese(&amp;#34;521&amp;#34;,&amp;#34;张三&amp;#34;,&amp;#34;Chinese&amp;#34;); Chinese c2=new Chinese(&amp;#34;522&amp;#34;,&amp;#34;李四&amp;#34;,&amp;#34;Chinese&amp;#34;); //输出 System.</description></item><item><title>0514_实例代码块</title><link>https://ob.doingnothing.ml/0514_%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/0514_%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81%E5%9D%97/</guid><description>0514_实例代码块 语法格式 1 2 3 { java 语句; } 作用 [!作用] sun公司为程序员准备的特殊时机：对象创建时机； 实例代码块，会在构造方法前执行，只要构造方法创建对象，就会在对象创建之前执行实例代码块； 如果每个构造方法中都有相同的部分，可以将相同的部分放在实例代码块中，这样每次执行new对象的时候，都可以通过实例代码块执行内容。
eg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package a005StaticAndthis; public class a05ShiliDaimakuai { public static void main(String[] args) { System.</description></item><item><title>0515_静态方法和实例方法</title><link>https://ob.doingnothing.ml/0515_%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/0515_%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</guid><description>0515_静态方法和实例方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 public class a01Statictest { public static void main(String[] args) { daYin1();//直接调用 // 实例方法 a01Statictest dd = new a01Statictest();//创建该类的实例化对象 dd.</description></item><item><title>0516_空指针访问静态不会空指针</title><link>https://ob.doingnothing.ml/0516_%E7%A9%BA%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E4%B8%8D%E4%BC%9A%E7%A9%BA%E6%8C%87%E9%92%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/0516_%E7%A9%BA%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E4%B8%8D%E4%BC%9A%E7%A9%BA%E6%8C%87%E9%92%88/</guid><description>0516_空指针访问静态不会空指针 ![[../../../../assets/Pasted image 20220702164751.png]] 即使将对象置空，引用静态变量，依旧不会出现空指针异常， 因为静态变量不依赖于对象的建立，而是类级别的，类相关的</description></item><item><title>0517_实例方法的调用</title><link>https://ob.doingnothing.ml/0517_%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/0517_%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</guid><description>0517_实例方法的调用 调用实例方法的原则 类=属性+方法
实例变量，需要对象 所以当方法需要由对象触发，就需要定义为实例方法
相关 ![[042b-实例方法]]</description></item><item><title>0518_不同代码块执行顺序</title><link>https://ob.doingnothing.ml/0518_%E4%B8%8D%E5%90%8C%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/0518_%E4%B8%8D%E5%90%8C%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid><description>0518_不同代码块执行顺序 代码
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package a005StaticAndthis; public class A06DaimaShunxu { // 静态代码块 static{ System.</description></item><item><title>051_static</title><link>https://ob.doingnothing.ml/051_static/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/051_static/</guid><description>051_static static翻译“静态” static修饰的都是类相关的，class级别的 static修饰的，都可以直接采用类名.进行访问 static修饰的变量：静态变量 static修饰的方法：[[052.静态方法和实例方法|静态方法]] [!变量的分类] 根据声明的位置分为 &amp;gt;1. 方法体中的变量：局部变量 &amp;gt;2. 方法体外的变量：成员变量 &amp;gt;成员变量又分为： &amp;gt;实例变量：需要通过[[../../02基本/024.对象的创建|创建对象]]来进行调用 &amp;gt;静态变量：可以直接使用，没有空指针异常的情况发生</description></item><item><title>051_静态代码块</title><link>https://ob.doingnothing.ml/0512_%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/0512_%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/</guid><description>051_静态代码块 执行 类加载时执行，在main方法前执行 只执行一次 常常用于记录程序类加载到JVM中的日志 自上而下执行 允许多个静态代码块 是一个特殊时机：类加载时机 语法格式 1 2 3 4 static{ java 语句; java 语句; } eg !</description></item><item><title>052_静态方法和实例方法</title><link>https://ob.doingnothing.ml/052_%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/052_%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</guid><description>052_静态方法和实例方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 public class a01Statictest { public static void main(String[] args) { daYin1();//直接调用 // 实例方法 a01Statictest dd = new a01Statictest();//创建该类的实例化对象 dd.</description></item><item><title>053_空指针访问静态不会空指针</title><link>https://ob.doingnothing.ml/053_%E7%A9%BA%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E4%B8%8D%E4%BC%9A%E7%A9%BA%E6%8C%87%E9%92%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/053_%E7%A9%BA%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E4%B8%8D%E4%BC%9A%E7%A9%BA%E6%8C%87%E9%92%88/</guid><description>053_空指针访问静态不会空指针 ![[../../../../assets/Pasted image 20220702164751.png]] 即使将对象置空，引用静态变量，依旧不会出现空指针异常， 因为静态变量不依赖于对象的建立，而是类级别的，类相关的</description></item><item><title>054_实例方法的调用</title><link>https://ob.doingnothing.ml/054_%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/054_%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</guid><description>054_实例方法的调用 调用实例方法的原则 类=属性+方法
实例变量，需要对象 所以当方法需要由对象触发，就需要定义为实例方法
相关 ![[042b-实例方法]]</description></item><item><title>055_不同代码块执行顺序</title><link>https://ob.doingnothing.ml/055_%E4%B8%8D%E5%90%8C%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.doingnothing.ml/055_%E4%B8%8D%E5%90%8C%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid><description>055_不同代码块执行顺序 代码
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package a005StaticAndthis; public class A06DaimaShunxu { // 静态代码块 static{ System.</description></item></channel></rss>