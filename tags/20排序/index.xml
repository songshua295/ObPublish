<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>20排序 on</title><link>https://ob.tianzhongs.ml/tags/20%E6%8E%92%E5%BA%8F/</link><description>Recent content in 20排序 on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://ob.tianzhongs.ml/tags/20%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>201_排序与查找</title><link>https://ob.tianzhongs.ml/201_%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/201_%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/</guid><description>201_排序与查找 排序的内置方法java.util.Arrays eg
1 java.util.Arrays(数组名); output ![[../../../../asset/Pasted image 20220720101424.png]]
[[202.冒泡排序方法]] [[203.选择排序]] [[204.顺序查找]] [[205.二分查找]] [[207.数组工具类java.util.Arrays]]</description></item><item><title>202_冒泡排序方法</title><link>https://ob.tianzhongs.ml/202_%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/202_%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</guid><description>202_冒泡排序方法 [!tip]+ 讲解
从第一个开始，依次向右比较，左边比右边的数大，就交换两个数字 第一轮可以把最大的数字放到最左边，第二轮依次 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class Test02 { public static void main(String[] args) { int[] b={1,54,6,7,6,464,78,12,46}; int[] c=sorta(b); for (int i = 0; i &amp;lt; c.</description></item><item><title>203_选择排序</title><link>https://ob.tianzhongs.ml/203_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/203_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid><description>203_选择排序 [!tip]+ 讲解 假设第一个数字为最小的数min，然后依次在这个数字后面找更小的数 如果找到了就记录最小数的下标，然后再把这个数与参与排序的第一个数相互交换 再假设第二个数为最小的数，在其后找最小的数交换 注意：与冒泡排序循环次数一样，都是(n-1)? 阶加次 时间复杂度： O(n²) 演示 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class Test03 { public static void main(String[] args) { int[] c=sorta(new int[]{2,3,38,5,47,15,36,26,27,44,46,38,47,50,48}); for (int i = 0; i &amp;lt; c.</description></item><item><title>204_顺序查找</title><link>https://ob.tianzhongs.ml/204_%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/204_%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/</guid><description>204_顺序查找 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class SearchTest01 { public static void main(String[] args) { int[] arr={1,5,45,5,64,8}; /* for (int i = 0; i &amp;lt;arr.</description></item><item><title>205_二分查找</title><link>https://ob.tianzhongs.ml/205_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/205_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid><description>205_二分查找 必要条件:**必须要在排序的基础上 ** 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public class ArraySearch02 { public static void main(String[] args) { int[] arr={1,45,56,78,89,455,1254,4546}; int index=arrBinSearch(arr,78); System.</description></item><item><title>207_数组工具类java_util_Arrays</title><link>https://ob.tianzhongs.ml/207_%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBjava_util_Arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/207_%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBjava_util_Arrays/</guid><description>207_数组工具类java_util_Arrays eg
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import java.</description></item></channel></rss>