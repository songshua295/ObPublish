<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>18匿名内部类 on</title><link>https://ob.tianzhongs.ml/tags/18%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</link><description>Recent content in 18匿名内部类 on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://ob.tianzhongs.ml/tags/18%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>181_匿名内部类</title><link>https://ob.tianzhongs.ml/181_%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/181_%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</guid><description>181_匿名内部类 tag: 装逼 注意 ![[182.匿名内部类eg#^8442de]] ![[182.匿名内部类eg#^85d701]]</description></item><item><title>182_匿名内部类eg</title><link>https://ob.tianzhongs.ml/182_%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BBeg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/182_%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BBeg/</guid><description>182_匿名内部类eg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 /* 匿名内部类： 1、什么是内部类？ 内部类：在类的内部又定义了一个新的类。被称为内部类。 2、内部类的分类： 静态内部类：类似于静态变量 实例内部类：类似于实例变量 局部内部类：类似于局部变量 3、使用内部类编写的代码，可读性很差。能不用尽量不用。 4、匿名内部类是局部内部类的一种。 因为这个类没有名字而得名，叫做匿名内部类。 5、学习匿名内部类主要是让大家以后在阅读别人代码的时候，能够理解。 并不代表以后都要这样写。因为匿名内部类有两个缺点： 缺点1：太复杂，太乱，可读性差。 缺点2：类没有名字，以后想重复使用，不能用。 6、不理解算了，你只要记住这种写法就行。 */ class Test01{ // 静态变量 static String country; // 该类在类的内部，所以称为内部类 // 由于前面有static，所以称为“静态内部类” static class Inner1{ } // 实例变量 int age; // 该类在类的内部，所以称为内部类 // 没有static叫做实例内部类。 class Inner2{ } // 方法 public void doSome(){ // 局部变量 int i = 100; // 该类在类的内部，所以称为内部类 // 局部内部类。 class Inner3{ } public void doOther(){ // doSome()方法中的局部内部类Inner3，在doOther()中不能用。 } // main方法，入口 public static void main(String[] args){ // 调用MyMath中的mySum方法。 MyMath mm = new MyMath(); /* Compute c = new ComputeImpl(); mm.</description></item></channel></rss>