<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>04封装 on</title><link>https://ob.dongthing.online/tags/04%E5%B0%81%E8%A3%85/</link><description>Recent content in 04封装 on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://ob.dongthing.online/tags/04%E5%B0%81%E8%A3%85/index.xml" rel="self" type="application/rss+xml"/><item><title>041_封装</title><link>https://ob.dongthing.online/041_%E5%B0%81%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/041_%E5%B0%81%E8%A3%85/</guid><description>041_封装 [[../02基本/022.面向对象和面向过程#^c344fe|封装]]的作用 [!作用] 保证内部结构的安全性 屏蔽复杂，暴露简单
怎么进行封装 ^zmfg 属性私有化private 创建简单的访问入口:对外提供公开的set和get方法作为实例方法,一个属性对外提供两个实例方法（get和set），同时可以对其的set实例方法设立关卡，满足什么条件才set。 ^cjjddfwrk get方法： java public 返回值类型 get+属性名首字母大写(无参数){ return xxx; } set方法： java public void set+属性名首字母大写(类型 xxx){ this.</description></item><item><title>042_实例方法</title><link>https://ob.dongthing.online/042_%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/042_%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</guid><description>042_实例方法 [!概要] 与实例相关的有：实例变量，实例方法 实例变量就是对象变量，实例方法就是对象方法 实例相关的都需要先new对象，通过引用的方式进行访问 实例变量相当于一个对象，需要我们自己创建一个对象实例来对其进行引用，才能够使用。每次创建一个实例变量，JVM就会为实例变量分配内存 也就是实例方法必须通过实例对象.去进行调用
语法格式 相当于普通方法去掉static修饰符
1 2 3 public void 方法名(){ 方法体 } 举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class Shilifangfa { public static void main(String[] args) { // 在进行普通方法调用时，通过.</description></item><item><title>043_书写格式</title><link>https://ob.dongthing.online/043_%E4%B9%A6%E5%86%99%E6%A0%BC%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/043_%E4%B9%A6%E5%86%99%E6%A0%BC%E5%BC%8F/</guid><description>043_书写格式 Java的封装[[041b-封装#^zmfg|格式]]举例 对java对象的属性进行私有化 1 2 3 4 pulic class Person{ private int age;//private私有化修饰符 private String name; } [[041b-封装#^e24f40|对外提供get和set公开入口]] 1 2 3 4 5 6 7 8 9 10 11 pulic class Person{ private int age;//private私有化修饰符 public int getAge(){//获取，需要返回值 return age; } public void setAge(int nianLing){//修改，不需要返回值 age=nianLing; } } 以上的get和set方法都没有加static修饰符，因为其为实例方法，需要依赖于生成的对象，没有对象，就不知道设置谁的属性了，这样才符合规律。没有person对象，设置年龄没用。</description></item></channel></rss>