<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MYSQL on</title><link>https://ob.dongthing.online/tags/MYSQL/</link><description>Recent content in MYSQL on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://ob.dongthing.online/tags/MYSQL/index.xml" rel="self" type="application/rss+xml"/><item><title>00012_事务</title><link>https://ob.dongthing.online/0012_%E4%BA%8B%E5%8A%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0012_%E4%BA%8B%E5%8A%A1/</guid><description>00012_事务 什么是事务？
一个事务是一个完整的业务逻辑单元，不可再分。 要想保证以上的两条DML语句同时成功或者同时失败，那么就需要使用数据库的“事务机制”。 和事务相关的语句只有：DML语句。（insert delete update）
为什么？因为它们这三个语句都是和数据库表当中的“数据”相关的。 事务的存在是为了保证数据的**完整性**，**安全性**。 [!faq]+ 事务的特性？ 事务包括四大特性：ACID A: 原子性：事务是最小的工作单元，不可再分。 C: 一致性：事务必须保证多条DML语句同时成功或者同时失败。 I：隔离性：事务A与事务B之间具有隔离。 D：持久性：持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束。</description></item><item><title>0001_概述</title><link>https://ob.dongthing.online/0001_%E6%A6%82%E8%BF%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0001_%E6%A6%82%E8%BF%B0/</guid><description>0001_概述 概述 忘记root密码怎么解决？ 关闭正在运行的ySQL服务。 打开Dos窗口，转到nysql\bin目录。 输入mysqld-skip-grant-tables回车。&amp;ndash;skip-grant-tables的意思是启动ysQL服务的时候跳过权限表认证。 再开一个Dos窗口(因为刚才那个Dos窗口己经不能动了)，转到mysg1\bin目录。 输入mysg1回车，如果成功，将出现MySQL提示符
。 连接权限数据库：use mysq1;. 改密码：update user set password-=password(&amp;ldquo;123&amp;rdquo;)where user:=&amp;ldquo;root&amp;rdquo;;（别忘了最后加分号）。 刷新权限（必须步骤）：f1 ush privileges; 退出guit.</description></item><item><title>0002_SQL语句的分类</title><link>https://ob.dongthing.online/0002_SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%88%86%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0002_SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%88%86%E7%B1%BB/</guid><description>0002_SQL语句的分类 SQL语句的分类 DQL（数据查询语言）：查询语句，凡是selecti语句都是DQL. DML（数据操作语言)：insert delete update,对表当中的数据进行增删改。 DDL（数据定义语言）：create drop alter,对表结构的增删改。 TCL（事务控制语言）：commit提交事务，rollback回滚事务。 DCL（数据控制语言）：grant授权、revoke撤销权限等。</description></item><item><title>0003_mysql基本命令使用</title><link>https://ob.dongthing.online/0003_mysql%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0003_mysql%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid><description>0003_mysql基本命令使用 作用 命令 相关 登录mysql数据库管理系统 mysql -u root -p password 查看有哪些数据库 show databases; 创建数据库 bash create database 数据库名称; 选择要使用的数据库 use 数据库名称 查看当前数据库中的表 show tables; 初始化数据 source sql文件路径 初始化之后的三张表（sql类型的文件叫sql脚本） 删除数据库 drop database 数据库名称; 查看某个表结构 desc 表名; 查看某个数据表的所有记录 select * from 表名* 查看当前使用的数据库 select database(); 查看当前的mysql版本 select version(); 结束一条语句 \c 退出mysql exit quit \q 终止一条正在编写的语句 键入\c 查看其他库中的表 show tables from &amp;lt;database name&amp;gt;; 查看表的创建语句 show create table &amp;lt;table name&amp;gt;;</description></item><item><title>0004_查询语句相关</title><link>https://ob.dongthing.online/0004_%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E7%9B%B8%E5%85%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0004_%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E7%9B%B8%E5%85%B3/</guid><description>0004_查询语句相关 like like：模糊查询，支持%和下划线匹配 % 代表多个任意字符（包括0个） _ 代表一个任意字符 like 后面的字符串必须放在单引号 &amp;rsquo;&amp;rsquo; 中 order by 升降序： order by asc表示升序，desc表示降序 多个排序条件，在多个条件中间逗号隔开即可 当有where时，必须放在where后面</description></item><item><title>0005_连接</title><link>https://ob.dongthing.online/0005_%E8%BF%9E%E6%8E%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0005_%E8%BF%9E%E6%8E%A5/</guid><description>0005_连接 根据连接方式来分类 内连接：inner join xxx on 条件 等值连接 非等值连接 自连接：通过自己来建立连接 外连接： left/right outer join xxx on 条件 ：主表的所有不满足条件的也会显示出来 左外连接（左连接） 示例 ： left outer join xxx on 条件 outer可以省略 右外连接（右连接） 示例 示例： 多张表连接查询 全连接（这个不讲，很少用！）</description></item><item><title>0006__嵌套子查询</title><link>https://ob.dongthing.online/0006__%E5%B5%8C%E5%A5%97%E5%AD%90%E6%9F%A5%E8%AF%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0006__%E5%B5%8C%E5%A5%97%E5%AD%90%E6%9F%A5%E8%AF%A2/</guid><description>0006__嵌套子查询 嵌套子查询 where后面嵌套 from后面 select中使用子查询作为字段</description></item><item><title>0007_union</title><link>https://ob.dongthing.online/0007_union/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0007_union/</guid><description>0007_union 合并集合（相加）</description></item><item><title>0008_limit</title><link>https://ob.dongthing.online/0008_limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0008_limit/</guid><description>0008_limit 是sql语句最后执行的一个环节 limit m,n 从第m个开始取，取n个记录 limit n 取n个记录</description></item><item><title>0009_DML（数据操作语言）</title><link>https://ob.dongthing.online/0009_DML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0009_DML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80/</guid><description>0009_DML（数据操作语言） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 createtabletableName(columnNamedataType(length),……………….</description></item><item><title>0010_约束(Constraint)</title><link>https://ob.dongthing.online/0010_%E7%BA%A6%E6%9D%9FConstraint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0010_%E7%BA%A6%E6%9D%9FConstraint/</guid><description>0010_约束(Constraint) 概述 什么是约束？常见的约束有哪些呢？ 在创建表的时候，可以给表的字段添加相应的约束， 添加约束的目的是为了保证表中数据的合法性、有效性、完整性。 常见的约束有哪些呢？ 非空约束(not null)：约束的字段不能为NULL 唯一约束(unique)：约束的字段不能重复 ** 但可以为NULL **。 主键约束(primary key)：约束的字段既不能为NULL，也不能重复（简称PK） 外键约束(foreign key)：&amp;hellip;（简称FK） 检查约束(check)：注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。 实操例子 非空约束eg 建表 测试</description></item><item><title>0011_存储引擎</title><link>https://ob.dongthing.online/0011_%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0011_%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid><description>0011_存储引擎 完整的建表语句
1 2 3 CREATETABLE`t_x`(`id`int(11)DEFAULTNULL)ENGINE=InnoDBDEFAULTCHARSET=utf8; mysql默认使用的存储引擎是InnoDB方式。 默认采用的字符集是UTF8
什么是存储引擎呢？
存储引擎这个名字只有在mysql中存在。（Oracle中有对应的机制，但是不叫做存储引擎。Oracle中没有特殊的名字，就是“表的存储方式”） mysql支持很多存储引擎，每一个存储引擎都对应了一种不同的存储方式。 每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎。 查看当前mysql支持的存储引擎？ show engines \G</description></item><item><title>0013_索引</title><link>https://ob.dongthing.online/0013_%E7%B4%A2%E5%BC%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0013_%E7%B4%A2%E5%BC%95/</guid><description>0013_索引 什么是索引？有什么用？ 索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。 在数据库方面，查询一张表的时候有两种检索方式：
第一种方式：全表扫描 第二种方式：根据索引检索（效率很高） 索引为什么可以提高检索效率呢？ 其实最根本的原理是缩小了扫描的范围。 索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中 的对象，也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改 这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。
添加索引是给某一个字段，或者说某些字段添加索引。
举例 select ename,sal from emp where ename = 'SMITH'; 当ename字段上没有添加索引的时候，以上sql语句会进行全表扫描，扫描ename字段中所有的值。 当ename字段上添加索引的时候，以上sql语句会根据索引扫描，快速定位。 怎么创建索引对象？怎么删除索引对象？ 创建索引对象：</description></item><item><title>0014视图(view)</title><link>https://ob.dongthing.online/0014%E8%A7%86%E5%9B%BEview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0014%E8%A7%86%E5%9B%BEview/</guid><description>0014视图(view) 什么是视图？ 站在不同的角度去看到数据。（同一张表的数据，通过不同的角度去看待）。
怎么创建视图？怎么删除视图？ create view myview as select empno,ename from emp; drop view myview;
注意：只有DQL语句才能以视图对象的方式创建出来。
对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作的原表） 可以对视图进行CRUD操作。</description></item><item><title>0015_DBA命令</title><link>https://ob.dongthing.online/0015_DBA%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0015_DBA%E5%91%BD%E4%BB%A4/</guid><description>0015_DBA命令 将数据库当中的数据导出 在windows的dos命令窗口中执行：（导出整个库） mysqldump bjpowernode&amp;gt;D:\bjpowernode.sql -uroot -p333
在windows的dos命令窗口中执行：（导出指定数据库当中的指定表） mysqldump bjpowernode emp&amp;gt;D:\bjpowernode.sql -uroot –p123
导入数据 create database bjpowernode; use bjpowernode; source D:\bjpowernode.</description></item><item><title>0016_数据库设计三范式</title><link>https://ob.dongthing.online/0016_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%89%E8%8C%83%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0016_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%89%E8%8C%83%E5%BC%8F/</guid><description>0016_数据库设计三范式 什么是设计范式？
设计表的依据。按照这个三范式设计的表不会出现数据冗余。
三范式都是哪些？ 第一范式：任何一张表都应该有主键，并且每一个字段原子性不可再分。 第二范式：建立在第一范式的基础之上，所有非主键字段完全依赖主键，不能产生部分依赖。 第三范式：建立在第二范式的基础之上，所有非主键字段直接依赖主键，不能产生传递依赖。
两张表，多的表加外键</description></item><item><title>0017_一对一怎么设计？</title><link>https://ob.dongthing.online/0017_%E4%B8%80%E5%AF%B9%E4%B8%80%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0017_%E4%B8%80%E5%AF%B9%E4%B8%80%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1/</guid><description>0017_一对一怎么设计？ 一对一设计有两种方案：主键共享 1 2 3 4 5 6 7 8 9 10 11 &amp;gt;t_user_login 用户登录表 &amp;gt;id(pk) username password &amp;gt;-------------------------------------- &amp;gt;1 zs 123 &amp;gt;2 ls 456 &amp;gt; &amp;gt;t_user_detail 用户详细信息表 &amp;gt;id(pk+fk) realname tel .</description></item><item><title>MySQL修改root密码</title><link>https://ob.dongthing.online/0018_MySQL%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.dongthing.online/0018_MySQL%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/</guid><description>0018_修改root密码 方法1： 用SET PASSWORD命令 首先登录MySQL。 格式：mysql&amp;gt; set password for 用户名@localhost = password(&amp;lsquo;新密码&amp;rsquo;); 例子：mysql&amp;gt; set password for root@localhost = password(&amp;lsquo;123&amp;rsquo;);
方法2：用mysqladmin 格式：mysqladmin -u用户名 -p旧密码 password 新密码 例子：mysqladmin -uroot -p123456 password 123</description></item></channel></rss>