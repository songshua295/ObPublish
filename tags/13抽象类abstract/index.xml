<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>13抽象类abstract on</title><link>https://ob.tianzhongs.ml/tags/13%E6%8A%BD%E8%B1%A1%E7%B1%BBabstract/</link><description>Recent content in 13抽象类abstract on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://ob.tianzhongs.ml/tags/13%E6%8A%BD%E8%B1%A1%E7%B1%BBabstract/index.xml" rel="self" type="application/rss+xml"/><item><title>131_抽象类</title><link>https://ob.tianzhongs.ml/131_%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/131_%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid><description>131_抽象类 ![[../../../../assets/Pasted image 20220712170300.png]]
什么是抽象类？ 类和类之前具有共同特征，把共同特征提取出来，形成的就是抽象类。抽象类本身不存在，所以抽象类无法创建对象，无法实例化。 抽象类的数据类型 引用数据类型 抽象类是用来继承的，所以final和abstract不能结合使用 抽象类的子类可以是抽象类 抽象类无法实例化，但是可以有构造方法，这个构造方法是供子类使用的 定义的语法 1 2 3 [修饰符列表] abstract class 类名{ 类体; }</description></item><item><title>132_抽象方法</title><link>https://ob.tianzhongs.ml/132_%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/132_%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</guid><description>132_抽象方法 抽象方法表示没有实现的方法，没有方法体的方法 1 public abstract void doSome(); `` 抽象类不一定有抽象方法，但是抽象方法只能出现在抽象类中。 一个非抽象的类继承抽象类，必须将抽象类中的抽象方法覆盖，进行实现。（因为抽象方法只能卸载抽象类中，所以才需要这样）</description></item><item><title>133_例子</title><link>https://ob.tianzhongs.ml/133_%E4%BE%8B%E5%AD%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/133_%E4%BE%8B%E5%AD%90/</guid><description>133_例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class AbstractTest01 { public static void main(String[] args) { Animal c1=new Cat();//向上转型 c1.</description></item><item><title>134_面试题</title><link>https://ob.tianzhongs.ml/134_%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/134_%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description>134_面试题 [!java语言中凡是没有方法体的方法都是抽象方法吗？] 错误。 Object类中的很多方法都没有方法体，都是以“；”结尾。但是他们都不是抽象方法。 比如public native int hashCode(); 这个方法底层调用了C++写的动态链接库程序，前面修饰符列表中没有abstract，有一个native，表示调用JVM本地程序</description></item></channel></rss>